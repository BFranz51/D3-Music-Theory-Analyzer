NOTES



IMPROVING ALGORITHM COMPLEXITY:

Starting with 438,516 comparisons across all 12 keys, for all datasets
Doing 2-step method: 70,863 comparisons (cut 83.8%)

Scoring algorithm:
-	Stricter for note-wise analysis
-	First comparison: only score modes that contain the user mode root

2nd iteration:
	START:										[Comparisons: 434,650]
	Cutoffs occur during algorithm:				[Comparisons: 145,015]
	Filter layer 1 early:						[Comparisons: 27,982]
	Filter layer 2 early:						[Comparisons: 10,317]

TODO:
-	Control: Randomness in filtering
-	Menu button: Reroll
-	Move unneeded data out of g object
X	New default
X	Limit nodes from right hand menu area
-	Put chords in rounded boxes, one line for each chord root


CADENCES: (all in key of C / Am)

	Resolute
G7 -> C
G7 -> Csus4 -> C

	Haunting, peaceful
Gmaj7 -> C
Gmaj7 -> Clyd -> C

	Plagal
F -> C

	Gamma cadence (step-wise)
G -> Am

	Has characteristic, plagal. Good for Dorian.
D -> Am

	Lydian
D -> C
D7 -> C

	Phrygian
Bb -> Am

	Borrow the V: (as long as there's a v chord)
E -> Am
G -> C

RULES for what sounds GOOD:
-	Major chords = stronger cadence
-	Proximity of non-tonic root to tonic
-	Is characteristic note involved? (adds to it)
-	Avoids diminished? (that resolves to ionian)
-	Half step pulls? (b2, maj7, 4->3, #4->5, b6->5, 2->b3)

RULES for what sounds BAD:
-	Breaking up the half-step pulls (Fmaj7 -> C removes the F -> E resolution)


CADENCE EXTENSIONS:
Replace I with Isus4 -> I
Replace I with I (lyd) -> I










CONTROLS:
*	How set are you on these notes? (penalty for removing each = [none, 50%, 100%, multiplicative] )
	>	Adding notes = minor scaling penalty, not big deal
*	Do you want to stick to this key? [no factor, 50%, instant disqualification]
*	
*	Graph max size		||		Filter style [only the best, 80/20 split of best, even distribution, only worst scores]

*	
*	Topology Features
*	Interval Topology (melodic options)

SLIDERS:
	Gas engine thingie with labels
	List of lights




Methods:

	COMPARE! (let M = # of modes stored)
*	Stores modes in array of booleans
*	Compares via score function
*	Massive penalty if root not included from either side
	O(12M)

	Output nodes, modes w/ keys
	Let N = # of nodes <= 12M

*	Compare each node to each other
	O(0.5 * N^2)

	Entire complexity = O(72M^2 + 12M)

	GRAPH!
	Create force directed graph with findings
	Special attention to mystery mode



COOL STUFF:
-	Special FX when press note button...
	-	Have note name fade out or something...
	-	Piano key vibrates

INPUT IDEA:
	* Allow multiple scale inputs
	* Start graph with them, and similarity edge between them

INPUT:
	* Better to add or take away notes? (balance)

INPUT:
	* Soft Parameters / Extreme Parameters - makes EVERY score value raised to certain power
	* Put this at the end
	* Labels: "Be forgiving" and "Stick to parameters"

CLUSTERING IDEA:
	INPUT: graphDepth

	* Get entire network
	* Get list of interesting connections to user scale
	* Identical modes => network (not clustered)
	* Reduce to clusters based on:
		- Close scores to user scale
		- Close scores to each other
	* Clusters => network
	* Edges between clusters => network
		Cutoff: (1 / graphDepth)
	* Modes connected to clusters => network (duplicate each, so not a mess of connections?????)
		Cutoff: (2 / graphDepth)
		Connect to each other too. Not to user scale
	* Modes connected to those...
		Cutoff: (3 / graphDepth)
		Connect to each other too. Not to user scale



<!--<svg width="500" height="360">
        <!-- Piano background
        <rect x="0" y="0" rx="10" ry="10" width="500" height="360" style="fill: #203720; stroke: #405740; stroke-width:3; opacity:1.0" />
        <!-- Piano top
        <rect x="0" y="0" rx="5" ry="5" width="500" height="70" style="fill: #304f30; stroke: #506f50; stroke-width:3; opacity:1.0" />
        <!-- Root selection circles
        <!-- Upper part of notes
        <rect x="10" y="70" rx="5" ry="5" width="20" height="70" style="fill: #304f30; stroke: #506f50; stroke-width:3; opacity:1.0" />
        <!-- Lower part of notes
    </svg>-->
